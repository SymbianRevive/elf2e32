// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).
// Copyright (c) 2017-2018 Strizhniou Fiodar
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors: Strizhniou Fiodar - fix build and runtime errors.
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
// FileDump Operations of elf2e32 tool to dump E32Image and generate ASM File.
// @internalComponent
// @released
//
//

#include <stdio.h>
#include "deffile.h"
#include "filedump.h"
#include "pl_symbol.h"
#include "pl_common.h"
#include "e32imagefile.h"
#include "errorhandler.h"
#include "parametermanager.h"
/**
Constructor for class FileDump
@param aParameterListInterface - Instance of class ParameterListInterface
@internalComponent
@released
*/
FileDump::FileDump(ParameterManager* aParameterManager) : iParam(aParameterManager)
{
}

/**
Destructor for class FileDump
@internalComponent
@released
*/
FileDump::~FileDump()
{
}

/**
Execute Function for the File Dump. It dumps E32 image or generate ASM file based on the
file dump options
@return 0 on success, otherwise throw error
@internalComponent
@released
*/
int FileDump::Execute()
{
    char *options = iParam->FileDumpOptions();
    char *output = iParam->E32ImageOutput();

    char *e32in = iParam->E32Input();

	if(options && output) //DumpAsm
	{
		GenerateAsmFile(output);
	}
	else if(e32in)
	{
		DumpE32Image(e32in);
	}
	else
        throw Elf2e32Error(INVALIDARGUMENTERROR, options, "--dump");
	return 0;
}

/**
Function to generate ASM File.
@param afileName - ASM File name
@return 0 on success, otherwise throw error
@internalComponent
@released
*/
int FileDump::GenerateAsmFile(const char* afileName)//DumpAsm
{
    char *options = iParam->FileDumpOptions();
    int dumpopt = iParam->DumpOptions();
    if(!(dumpopt & EDumpAsm))
        throw Elf2e32Error(INVALIDARGUMENTERROR, (!options?"":options), "--dump");
    if(dumpopt & 31)
        throw Elf2e32Error(INVALIDARGUMENTERROR, (!options?"":options), "--dump");

    char *defin = iParam->DefInput();
    if(!defin)
        throw Elf2e32Error(NOREQUIREDOPTIONERROR, "--definput");

	DefFile *iDefFile = new DefFile();
	Symbols aSymList = iDefFile->GetSymbols(defin);

	FILE *fptr;

	if((fptr=fopen(afileName,"w"))==NULL)
	{
		throw Elf2e32Error(FILEOPENERROR, afileName);
	}
	else
	{
		Symbols::iterator aItr = aSymList.begin();
		Symbols::iterator last = aSymList.end();
		Symbol *aSym;

		while( aItr != last)
		{
			aSym = *aItr;

			if(aSym->Absent())
			{
				++aItr;
				continue;
			}

			fputs("\tIMPORT ",fptr);
			fputs(aSym->SymbolName(),fptr);
			//Set the visibility of the symbols as default."DYNAMIC" option is
			//added to remove STV_HIDDEN visibility warnings generated by every
			//export during kernel build
			fputs(" [DYNAMIC]", fptr);
			fputs("\n",fptr);
			++aItr;
		}

        // Create a directive section that instructs the linker to make all listed
        // symbols visible.

        fputs("\n AREA |.directive|, READONLY, NOALLOC\n\n",fptr);

        fputs("\tDCB \"#<SYMEDIT>#\\n\"\n", fptr);

		aItr = aSymList.begin();
		while (aItr != last)
		{
			aSym = *aItr;

			if ( aSym->Absent() )
			{
				++aItr;
				continue;
			}

            // Example:
            //  DCB "EXPORT __ARM_ll_mlass\n"
			fputs("\tDCB \"EXPORT ",fptr);
			fputs(aSym->SymbolName(),fptr);
			fputs("\\n\"\n", fptr);

			++aItr;
		}

		fputs("\n END\n",fptr);
		fclose(fptr);
	}
	return 0;
}

/**
Function to Dump E32 Image.
@param afileName - E32 Image File name
@return 1 on success, otherwise throw error
@internalComponent
@released
*/
int FileDump::DumpE32Image(const char* afileName)
{
	E32ImageFile *aE32Imagefile=new E32ImageFile();
	TInt result = aE32Imagefile->Open(afileName);

	if (result > 0)
		return 1;
	else if (result == KErrCorrupt || result == KErrNotSupported)
	{
		throw Elf2e32Error(INVALIDE32IMAGEERROR, afileName);
	}
	else if (result != 0)
	{
		throw Elf2e32Error(FILEREADERROR, afileName);
	}

	int dumpOptions=iParam->DumpOptions();

	aE32Imagefile->Dump(afileName, dumpOptions);
	delete aE32Imagefile;
	return KErrNone;
}

